[
  {
    "instruction": " Write an iptable rule to avoid Local Area Network Denial (LAND) Attacks.",
    "input": "",
    "output": "iptables -A INPUT -s <your_network_IP> -d <your_network_IP> -j DROP"
  },
  {
    "instruction": " Write an iptable rule that avoids an attack in which the attacker sets the source and destination information of a TCP segment to be the same.",
    "input": "",
    "output": "iptables -A INPUT -s <your_network_IP> -d <your_network_IP> -j DROP"
  },
{
  "instruction": " Write an iptable rule that drops packets with the same source and destination IP address.", "input": "", "output": "iptables -A INPUT -s <your_network_IP> -d <your_network_IP> -j DROP"},
{"instruction": " Write a snort rule to alert Local Area Network Denial (LAND) Attacks.", "input": "", "output": "alert tcp <your_network_IP> any -> <your_network_IP> any (msg:'Alert - Same Source and Destination IP';)"},
{"instruction": " Write a snort rule that alerts an attack in which the attacker sets the source and destination information of a TCP segment to be the same.", "input": "", "output": "alert tcp <your_network_IP> any -> <your_network_IP> any (msg:'Alert - Same Source and Destination IP';)"},
{"instruction": " Write a snort rule that alerts packets with the same source and destination IP address.", "input": "", "output": "alert tcp <your_network_IP> any -> <your_network_IP> any (msg:'Alert - Same Source and Destination IP';)"},
{"instruction": " Write an iptable rule to avoid Ping of Death attacks.", "input": "", "output": "iptables -A INPUT -p icmp --icmp-type echo-request -m length --length 65535 -j DROP"},
{"instruction": " Write an iptable rule that avoids an attack in which the attacker sends a malformed ping packet that exceeds the maximum IPv4 packet size.", "input": "", "output": "iptables -A INPUT -p icmp --icmp-type echo-request -m length --length 65535 -j DROP"},
{"instruction": " Write an iptable rule that drops ICMP packets with a length greater than 65,535 bytes.", "input": "", "output": "iptables -A INPUT -p icmp --icmp-type echo-request -m length --length 65535 -j DROP"},
{"instruction": " Write a snort rule to alert Ping of Death attacks.", "input": "", "output": "alert icmp any any -> any any (icmptype: any; dsize > 65535; msg: 'Large ICMP Packet';)"},
{"instruction": " Write a snort rule that alerts an attack in which the attacker sends a malformed ping packet that exceeds the maximum IPv4 packet size.", "input": "", "output": "alert icmp any any -> any any (icmptype: any; dsize > 65535; msg: 'Large ICMP Packet';)"},
{"instruction": " Write a snort rule that alerts ICMP packets with a dsize bigger than 65,535 bytes.", "input": "", "output": "alert icmp any any -> any any (icmptype: any; dsize > 65535; msg: 'Large ICMP Packet';)"},
{"instruction": " Write an iptable rule to avoid Smurf Attacks.", "input": "", "output": "iptables -A INPUT -p icmp -d 255.255.255.255 -j DROP"},
{"instruction": " Write an iptable rule that avoids an attack in which the attacker sends a large number of ICMP echo requests to an IP broadcast address, all of which have a spoofed source IP address of the intended victim.", "input": "", "output": "iptables -A INPUT -p icmp -d 255.255.255.255 -j DROP"},
{"instruction": " Write an iptable rule that drops ICMP packets with a broadcast address as the destination address.", "input": "", "output": "iptables -A INPUT -p icmp -d 255.255.255.255 -j DROP"},
{"instruction": " Write a snort rule to alert Smurf Attacks.", "input": "", "output": "alert icmp any any -> 255.255.255.255 any (msg:'ICMP Packet to Broadcast Address';)"},
{"instruction": " Write a snort rule that alerts an attack in which the attacker sends a large number of ICMP echo requests to an IP broadcast address, all of which have a spoofed source IP address of the intended victim.", "input": "", "output": "alert icmp any any -> 255.255.255.255 any (msg:'ICMP Packet to Broadcast Address';)"},
{"instruction": " Write a snort rule that alerts ICMP packets with a broadcast address as the destination address.", "input": "", "output": "alert icmp any any -> 255.255.255.255 any (msg:'ICMP Packet to Broadcast Address';)"},
{"instruction": " Write an iptable rule to avoid Fraggle Attacks.", "input": "", "output": "iptables -A INPUT -p udp -d 255.255.255.255 -j DROP"},
{"instruction": " Write an iptable rule that avoids an attack in which the attacker sends a large number of UDP echo and chargen requests to an IP broadcast address, all of which have a spoofed source IP address of the intended victim.", "input": "", "output": "iptables -A INPUT -p udp -d 255.255.255.255 -j DROP"},
{"instruction": " Write an iptable rule that drops UDP packets with a broadcast address as the destination address.", "input": "", "output": "iptables -A INPUT -p udp -d 255.255.255.255 -j DROP"},
{"instruction": " Write a snort rule to alert Fraggle Attacks.", "input": "", "output": "alert udp any any -> 255.255.255.255 any (msg:'Alert UDP Packet with Broadcast Destination Address';)"},
{"instruction": " Write a snort rule that alerts an attack in which the attacker sends a large number of UDP echo and chargen requests to an IP broadcast address, all of which have a spoofed source IP address of the intended victim.", "input": "", "output": "alert udp any any -> 255.255.255.255 any (msg:'Alert UDP Packet with Broadcast Destination Address';)"},
{"instruction": " Write a snort rule that alerts UDP packets with a broadcast address as the destination address.", "input": "", "output": "alert udp any any -> 255.255.255.255 any (msg:'Alert UDP Packet with Broadcast Destination Address';)"},
{"instruction": " Write an iptable rule to avoid SYN Flood attacks.", "input": "", "output": "iptables -A INPUT -p tcp --syn -m state --state NEW,ESTABLISHED -m limit --limit 10/s --limit-burst 15 -j ACCEPT"},
{"instruction": " Write an iptable rule that avoids an attack in which the attacker sends a large number of TCP SYN packets to the victim, but does not respond to the victim's acknowledgement.", "input": "", "output": "iptables -A INPUT -p tcp --syn -m state --state NEW,ESTABLISHED -m limit --limit 10/s --limit-burst 15 -j ACCEPT"},
{"instruction": " Write an iptable rule that limits the number of TCP SYN packets per second with the state NEW or ESTABLISHED.", "input": "", "output": "iptables -A INPUT -p tcp --syn -m state --state NEW,ESTABLISHED -m limit --limit 10/s --limit-burst 15 -j ACCEPT"},
{"instruction": " Write a snort rule to alert SYN Flood attacks.", "input": "", "output": "alert tcp any any -> any any (flags: S; flow: stateless; detection_filter: track by_dst, count 50, seconds 10; msg: 'TCP SYN Flood Detected';)"},
{"instruction": " Write a snort rule that alerts an attack in which the attacker sends a large number of TCP SYN packets to the victim, but does not respond to the victim's acknowledgement.", "input": "", "output": "alert tcp any any -> any any (flags: S; flow: stateless; detection_filter: track by_dst, count 50, seconds 10; msg: 'TCP SYN Flood Detected';)"},
{"instruction": " Write a snort rule that alerts TCP SYN packets with the flow stateless, detection filter is track by_dst, count 50 and seconds 10.", "input": "", "output": "alert tcp any any -> any any (flags: S; flow: stateless; detection_filter: track by_dst, count 50, seconds 10; msg: 'TCP SYN Flood Detected';)"},
{"instruction": " Write an iptable rule to avoid UDP Flood attacks.", "input": "", "output": "iptables -A INPUT -p udp -m limit --limit 10/s --limit-burst 15 -j ACCEPT"},
{"instruction": " Write an iptable rule that avoids an attack in which the attacker sends a large number of UDP packets to random ports on the victim.", "input": "", "output": "iptables -A INPUT -p udp -m limit --limit 10/s --limit-burst 15 -j ACCEPT"},
{"instruction": " Write an iptable rule that limits the number of UDP packets per second.", "input": "", "output": "iptables -A INPUT -p udp -m limit --limit 10/s --limit-burst 15 -j ACCEPT"},
{"instruction": " Write a snort rule to alert UDP Flood attacks.", "input": "", "output": "alert udp any any -> any any (flow:stateless; detection_filter:track by_dst, count 50, seconds 10; msg: 'UDP Flood Detected';)"},
{"instruction": " Write a snort rule that alerts an attack in which the attacker sends a large number of UDP packets to random ports on the victim.", "input": "", "output": "alert udp any any -> any any (flow:stateless; detection_filter:track by_dst, count 50, seconds 10; msg: 'UDP Flood Detected';)"},
{"instruction": " Write a snort rule that alerts UDP packets with the flow stateless, detection filter is track by_dst, count 50 and seconds 10.", "input": "", "output": "alert udp any any -> any any (flow:stateless; detection_filter:track by_dst, count 50, seconds 10; msg: 'UDP Flood Detected';)"},
{"instruction": " Write an iptable rule to avoid RST/FIN Flood attacks.", "input": "", "output": "iptables -A INPUT -p tcp --tcp-flags RST,FIN -m limit --limit 10/s --limit-burst 15 -j ACCEPT"},
{"instruction": " Write an iptable rule that avoids an attack in which the attacker sends a large number of TCP RST/FIN packets to the victim.", "input": "", "output": "iptables -A INPUT -p tcp --tcp-flags RST,FIN -m limit --limit 10/s --limit-burst 15 -j ACCEPT"},
{"instruction": " Write an iptable rule that limits the number of TCP RST/FIN packets per second.", "input": "", "output": "iptables -A INPUT -p tcp --tcp-flags RST,FIN -m limit --limit 10/s --limit-burst 15 -j ACCEPT"},
{"instruction": " Write a snort rule to alert RST/FIN Flood attacks.", "input": "", "output": "alert tcp any any -> any any (flags: RF; flow: stateless; detection_filter: track by_dst, count 50, seconds 10; msg: 'RST/FIN Flood Detected';)"},
{"instruction": " Write a snort rule that alerts an attack in which the attacker sends a large number of TCP RST/FIN packets to the victim.", "input": "", "output": "alert tcp any any -> any any (flags: RF; flow: stateless; detection_filter: track by_dst, count 50, seconds 10; msg: 'RST/FIN Flood Detected';)"},
{"instruction": " Write a snort rule that alerts TCP packets with the flow stateless, flags R and F, detection filter is track by_dst, count 50 and seconds 10.", "input": "", "output": "alert tcp any any -> any any (flags: RF; flow: stateless; detection_filter: track by_dst, count 50, seconds 10; msg: 'RST/FIN Flood Detected';)"},
{"instruction": " Write an iptable rule to avoid Slowloris attacks.", "input": "", "output": "iptables -A INPUT -p tcp -m connlimit --connlimit-above 10 -j REJECT"},
{"instruction": " Write an iptable rule that avoids an attack in which the attacker sends a large number of HTTP requests to open connections and keeps them open for as long as possible.", "input": "", "output": "iptables -A INPUT -p tcp -m connlimit --connlimit-above 10 -j REJECT"},
{"instruction": " Write an iptable rule that limits the number of open connections per IP address.", "input": "", "output": "iptables -A INPUT -p tcp -m connlimit --connlimit-above 10 -j REJECT"},
{"instruction": " Write a snort rule to alert Slowloris attacks.", "input": "", "output": "alert tcp any any -> any any (flow:established, to_server; detection_filter: track by_src, count 50, seconds 10; msg:'Possible Slowloris Attack';)"},
{"instruction": " Write a snort rule that alerts an attack in which the attacker sends a large number of HTTP requests to open connections and keeps them open for as long as possible.", "input": "", "output": "alert tcp any any -> any any (flow:established, to_server; detection_filter: track by_src, count 50, seconds 10; msg:'Possible Slowloris Attack';)"},
{"instruction": " Write a snort rule that alerts TCP packets with the flow established and to server, detection filter is track by_src, count 50 and seconds 10.", "input": "", "output": "alert tcp any any -> any any (flow:established, to_server; detection_filter: track by_src, count 50, seconds 10; msg:'Possible Slowloris Attack';)"},
{"instruction": " Write an iptable rule to avoid R-U-Dead-Yet?(RUDY) attacks.", "input": "", "output": "iptables -A INPUT -m conntrack --ctstate ESTABLISHED -m conntrack --ctexpire 300 -j ACCEPT"},
{"instruction": " Write an iptable rule that avoids an attack in which the attacker uses an attack tool that browses the target website and detects embedded web forms, sends legitimate HTTP POST requests with an abnormally long 'content-length' header to the victim and then starts injecting the form with information, one byte-size packet at a time and at a very slow rate.", "input": "", "output": "iptables -A INPUT -m conntrack --ctstate ESTABLISHED -m conntrack --ctexpire 300 -j ACCEPT"},
{"instruction": " Write an iptable rule that limits the connection timeout interval.", "input": "", "output": "iptables -A INPUT -m conntrack --ctstate ESTABLISHED -m conntrack --ctexpire 300 -j ACCEPT"},
{"instruction": " Write an iptable rule to avoid Slow Read attacks.", "input": "", "output": "iptables -A INPUT -m conntrack --ctstate ESTABLISHED -m conntrack --ctexpire 300 -j ACCEPT"},
{"instruction": " Write an iptable rule that avoids an attack in which the attacker sends legitimate HTTP requests to the victim and then reads the response very slowly.", "input": "", "output": "iptables -A INPUT -m conntrack --ctstate ESTABLISHED -m conntrack --ctexpire 300 -j ACCEPT"},
{"instruction": " Write an iptable rule that limits the connection timeout interval.", "input": "", "output": "iptables -A INPUT -m conntrack --ctstate ESTABLISHED -m conntrack --ctexpire 300 -j ACCEPT"},
{"instruction": " Write an iptable rule to avoid Slow POST attacks.", "input": "", "output": "iptables -A INPUT -m conntrack --ctstate ESTABLISHED -m conntrack --ctexpire 300 -j ACCEPT"},
{"instruction": " Write an iptable rule that avoids an attack in which the attacker sends legitimate HTTP POST headers to the victim and then sends the message very slowly.", "input": "", "output": "iptables -A INPUT -m conntrack --ctstate ESTABLISHED -m conntrack --ctexpire 300 -j ACCEPT"},
{"instruction": " Write an iptable rule that limits the connection timeout interval.", "input": "", "output": "iptables -A INPUT -m conntrack --ctstate ESTABLISHED -m conntrack --ctexpire 300 -j ACCEPT"},
{"instruction": " Write an iptable rule to avoid DNS Amplification attacks.", "input": "", "output": "iptables -A INPUT -p udp --dport 53 -m connlimit --connlimit-above 10 -j REJECT"},
{"instruction": " Write an iptable rule that avoids an attack in which the attacker sends a large number of DNS requests to a DNS server with a spoofed source IP address of the victim.", "input": "", "output": "iptables -A INPUT -p udp --dport 53 -m connlimit --connlimit-above 10 -j REJECT"},
{"instruction": " Write an iptable rule that limits the number of DNS requests per second.", "input": "", "output": "iptables -A INPUT -p udp --dport 53 -m connlimit --connlimit-above 10 -j REJECT"},
{"instruction": " Write a snort rule to alert DNS Amplification attacks.", "input": "", "output": "alert udp any any -> any 53 (flow:stateless; detection_filter:track by_dst, count 50, seconds 10; msg:'Possible DNS Amplification Attack';)"},
{"instruction": " Write a snort rule that alerts an attack in which the attacker sends a large number of DNS requests to a DNS server with a spoofed source IP address of the victim.", "input": "", "output": "alert udp any any -> any 53 (flow:stateless; detection_filter:track by_dst, count 50, seconds 10; msg:'Possible DNS Amplification Attack';)"},
{"instruction": " Write a snort rule that alerts UDP packets to port 53 with the flow stateless, detection filter is track by_dst, count 50 and seconds 10.", "input": "", "output": "alert udp any any -> any 53 (flow:stateless; detection_filter:track by_dst, count 50, seconds 10; msg:'Possible DNS Amplification Attack';)"},
{"instruction": " Write an iptable rule to avoid BlackNurse attacks.", "input": "", "output": "iptables -A INPUT -p icmp --icmp-type 3 -j DROP"},
{"instruction": " Write an iptable rule that avoids an attack in which the attacker sends some ICMP Destination Unreachable packets to the victim.", "input": "", "output": "iptables -A INPUT -p icmp --icmp-type 3 -j DROP"},
{"instruction": " Write an iptable rule that drops ICMP packets with a icmp type 3.", "input": "", "output": "iptables -A INPUT -p icmp --icmp-type 3 -j DROP"},
{"instruction": " Write a snort rule to alert BlackNurse attacks.", "input": "", "output": "alert icmp any any -> any any (itype: 3; msg:'Possible BlackNurse Attack';)"},
{"instruction": " Write a snort rule that alerts an attack in which the attacker sends some ICMP Destination Unreachable packets to the victim.", "input": "", "output": "alert icmp any any -> any any (itype: 3; msg:'Possible BlackNurse Attack';)"},
{"instruction": " Write a snort rule that alerts ICMP packets with a itype 3.", "input": "", "output": "alert icmp any any -> any any (itype: 3; msg:'Possible BlackNurse Attack';)"},
{"instruction": " Write an iptable rule to avoid Low Orbit Ion Cannon (LOIC) attacks.", "input": "", "output": "iptables -A INPUT -p tcp -m connlimit --connlimit-above 10 -j REJECT iptables -A INPUT -p udp -m connlimit --connlimit-above 10 -j REJECT"},
{"instruction": " Write an iptable rule that avoids an attack in which the attacker uses a LOIC tool to send a large number of TCP/UDP/HTTP requests to the victim.", "input": "", "output": "iptables -A INPUT -p tcp -m connlimit --connlimit-above 10 -j REJECT iptables -A INPUT -p udp -m connlimit --connlimit-above 10 -j REJECT"},
{"instruction": " Write an iptable rule that limits the number of TCP and UDP packets per second.", "input": "", "output": "iptables -A INPUT -p tcp -m connlimit --connlimit-above 10 -j REJECT iptables -A INPUT -p udp -m connlimit --connlimit-above 10 -j REJECT"},
{"instruction": " Write a snort rule to alert Low Orbit Ion Cannon (LOIC) attacks.", "input": "", "output": "alert tcp any any -> any any (flow:stateless; detection_filter:track by_dst, count 50, seconds 10; msg:'Possible LOIC Attack Detected';) alert udp any any -> any any (flow:stateless; detection_filter:track by_dst, count 50, seconds 10; msg:'Possible LOIC Attack Detected';)"},
{"instruction": " Write a snort rule that alerts an attack in which the attacker uses a LOIC tool to send a large number of TCP/UDP/HTTP requests to the victim.", "input": "", "output": "alert tcp any any -> any any (flow:stateless; detection_filter:track by_dst, count 50, seconds 10; msg:'Possible LOIC Attack Detected';) alert udp any any -> any any (flow:stateless; detection_filter:track by_dst, count 50, seconds 10; msg:'Possible LOIC Attack Detected';)"},
{"instruction": " Write a snort rule that alerts TCP and UDP packets with the flow stateless, detection filter is track by_dst, count 50 and seconds 10.", "input": "", "output": "alert tcp any any -> any any (flow:stateless; detection_filter:track by_dst, count 50, seconds 10; msg:'Possible LOIC Attack Detected';) alert udp any any -> any any (flow:stateless; detection_filter:track by_dst, count 50, seconds 10; msg:'Possible LOIC Attack Detected';)"},
{"instruction": " Write an iptable rule to avoid High Orbit Ion Cannon (HOIC) attacks.", "input": "", "output": "iptables -A INPUT -p tcp -m connlimit --connlimit-above 10 -j REJECT"},
{"instruction": " Write an iptable rule that avoids an attack in which the attacker floods the victim with a large number of HTTP POST and GET requests.", "input": "", "output": "iptables -A INPUT -p tcp -m connlimit --connlimit-above 10 -j REJECT"},
{"instruction": " Write an iptable rule that limits the number of TCP packets per second.", "input": "", "output": "iptables -A INPUT -p tcp -m connlimit --connlimit-above 10 -j REJECT"},
{"instruction": " Write a snort rule to alert High Orbit Ion Cannon (HOIC) attacks.", "input": "", "output": "alert tcp any any -> any any (msg:'Possible HOIC Attack Detected'; flow:stateless; detection_filter:track by_dst, count 50, seconds 10; content:'POST'; http_method; content:'GET'; http_method;)"},
{"instruction": " Write a snort rule that alerts an attack in which the attacker floods the victim with a large number of HTTP POST and GET requests.", "input": "", "output": "alert tcp any any -> any any (msg:'Possible HOIC Attack Detected'; flow:stateless; detection_filter:track by_dst, count 50, seconds 10; content:'POST'; http_method; content:'GET'; http_method;)"},
{"instruction": " Write a snort rule that alerts HTTP POST and GET requests with the flow stateless, detection filter is track by_dst, count 50 and seconds 10.", "input": "", "output": "alert tcp any any -> any any (msg:'Possible HOIC Attack Detected'; flow:stateless; detection_filter:track by_dst, count 50, seconds 10; content:'POST'; http_method; content:'GET'; http_method;)"},
{"instruction": " Write a snort rule to alert SubSeven attacks.", "input": "", "output": "alert tcp $EXTERNAL_NET 27374 -> $HOME_NET any (msg:'BACKDOOR subseven 22'; flow:to_server,established; content:'|0D 0A|[RPL]002|0D 0A|';)"},
{"instruction": " Write a snort rule that alerts an attack in which the attacker uses a Remote Access Trojan (RAT) to control the victim's computer.", "input": "", "output": "alert tcp $EXTERNAL_NET 27374 -> $HOME_NET any (msg:'BACKDOOR subseven 22'; flow:to_server,established; content:'|0D 0A|[RPL]002|0D 0A|';)"},
{"instruction": " Write a snort rule that alerts incoming packets from port 27374 to any port on your network that has the flow to server and established and the content '|0D 0A|[RPL]002|0D 0A|'.", "input": "", "output": "alert tcp $EXTERNAL_NET 27374 -> $HOME_NET any (msg:'BACKDOOR subseven 22'; flow:to_server,established; content:'|0D 0A|[RPL]002|0D 0A|';)"},
{"instruction": " Write a snort rule to alert Teardrop attacks.", "input": "", "output": "alert udp $EXTERNAL_NET any -> $HOME_NET any (msg:'DOS Teardrop attack'; fragbits:M; id:242;)"},
{"instruction": " Write a snort rule that alerts an attack in which the attacker sends a series of fragmented packets.", "input": "", "output": "alert udp $EXTERNAL_NET any -> $HOME_NET any (msg:'DOS Teardrop attack'; fragbits:M; id:242;)"},
{"instruction": " Write a snort rule that alerts incoming udp packets with the fragbits value set to more fragments.", "input": "", "output": "alert udp $EXTERNAL_NET any -> $HOME_NET any (msg:'DOS Teardrop attack'; fragbits:M; id:242;)"},
{"instruction": " Write a snort rule to alert WinNuke attacks.", "input": "", "output": "alert tcp $EXTERNAL_NET any -> $HOME_NET 135:139 (msg:'DOS Winnuke attack'; flow:stateless; flags:U+;)"},
{"instruction": " Write a snort rule that alerts an attack in which the attacker sends a string of out-of-band data to the victim.", "input": "", "output": "alert tcp $EXTERNAL_NET any -> $HOME_NET 135:139 (msg:'DOS Winnuke attack'; flow:stateless; flags:U+;)"},
{"instruction": " Write a snort rule that alerts incoming packets to port 135 through 139 that have a stateless flow and a flag of U+ set.", "input": "", "output": "alert tcp $EXTERNAL_NET any -> $HOME_NET 135:139 (msg:'DOS Winnuke attack'; flow:stateless; flags:U+;)"},
{"instruction": " Write a snort rule to alert Squid WCCP Message Overflow attacks.", "input": "", "output": "alert udp $EXTERNAL_NET any -> $HOME_NET 2048 (msg:'DOS squid WCCP I_SEE_YOU message overflow attempt'; content:'|00 00 00 08|'; depth:4; byte_test:4,>,32,16; reference:cve,CAN-2005-0095; reference:bugtraq,12275; classtype:attempted-user; sid:3089; rev:1;)"},
{"instruction": " Write a snort rule that alerts an attack in which the attacker sends WCCP messages with more data than the buffer can handle.", "input": "", "output": "alert udp $EXTERNAL_NET any -> $HOME_NET 2048 (msg:'DOS squid WCCP I_SEE_YOU message overflow attempt'; content:'|00 00 00 08|'; depth:4; byte_test:4,>,32,16; reference:cve,CAN-2005-0095; reference:bugtraq,12275; classtype:attempted-user; sid:3089; rev:1;)"},
{"instruction": " Write a snort rule that alerts incoming udp packets to port 2048 that have the content '|00 00 00 08|', depth 4 and byte_test 4, >, 32, 16.", "input": "", "output": "alert udp $EXTERNAL_NET any -> $HOME_NET 2048 (msg:'DOS squid WCCP I_SEE_YOU message overflow attempt'; content:'|00 00 00 08|'; depth:4; byte_test:4,>,32,16; reference:cve,CAN-2005-0095; reference:bugtraq,12275; classtype:attempted-user; sid:3089; rev:1;)"},
{"instruction": " Write a snort rule to alert SSH CRC32 Overflow /bin/sh exploits.", "input": "", "output": "alert tcp $EXTERNAL_NET any -> $HOME_NET 22 (msg:'EXPLOIT ssh CRC32 overflow /bin/sh'; flow:to_server,established; content:'/bin/sh';)"},
{"instruction": " Write a snort rule that alerts when the attacker executes arbitrary commands on an SSH server via an integer overflow.", "input": "", "output": "alert tcp $EXTERNAL_NET any -> $HOME_NET 22 (msg:'EXPLOIT ssh CRC32 overflow /bin/sh'; flow:to_server,established; content:'/bin/sh';)"},
{"instruction": " Write a snort rule that alerts incoming packets to port 22 that have the flow to server and established and the content 'bin/sh'.", "input": "", "output": "alert tcp $EXTERNAL_NET any -> $HOME_NET 22 (msg:'EXPLOIT ssh CRC32 overflow /bin/sh'; flow:to_server,established; content:'/bin/sh';)"},
{"instruction": " Write a snort rule to alert x86 Linux Samba Overflow exploits.", "input": "", "output": "alert tcp $EXTERNAL_NET any -> $HOME_NET 139 (msg:'EXPLOIT x86 Linux samba overflow'; flow:to_server,established; content:'|EB|/_|EB|J^|89 FB 89|>|89 F2|';)"},
{"instruction": " Write a snort rule that alerts when the attacker exploits the flaw on x86 Linux systems that don't have the noexec stack option set and the buffer overflow found in Samba.", "input": "", "output": "alert tcp $EXTERNAL_NET any -> $HOME_NET 139 (msg:'EXPLOIT x86 Linux samba overflow'; flow:to_server,established; content:'|EB|/_|EB|J^|89 FB 89|>|89 F2|';)"},
{"instruction": " Write a snort rule that alerts incoming packets to port 139 that have the flow to server and established and the content '|EB|/_|EB|J^|89 FB 89|>|89 F2|'.", "input": "", "output": "alert tcp $EXTERNAL_NET any -> $HOME_NET 139 (msg:'EXPLOIT x86 Linux samba overflow'; flow:to_server,established; content:'|EB|/_|EB|J^|89 FB 89|>|89 F2|';)"},
{"instruction": " Write a snort rule to alert ISAKMP First Payload Certificate Request Length Overflow exploits.", "input": "", "output": "alert udp $EXTERNAL_NET any -> $HOME_NET 500 (msg:'EXPLOIT ISAKMP first payload certificate request length overflow attempt'; byte_test:4,>,2043,24; content:'|07|'; depth:1; offset:16; byte_test:2,>,2043,30;)"},
{"instruction": " Write a snort rule that alerts when the attacker executes arbitrary code via an ISAKMP packet with a large Certificate Request packet.", "input": "", "output": "alert udp $EXTERNAL_NET any -> $HOME_NET 500 (msg:'EXPLOIT ISAKMP first payload certificate request length overflow attempt'; byte_test:4,>,2043,24; content:'|07|'; depth:1; offset:16; byte_test:2,>,2043,30;)"},
{"instruction": " Write a snort rule that alerts incoming udp packets to port 500 that have the content '|07|', depth 1, offset 16 and byte_test 4,>,2043,24 and 2,>,2043,30.", "input": "", "output": "alert udp $EXTERNAL_NET any -> $HOME_NET 500 (msg:'EXPLOIT ISAKMP first payload certificate request length overflow attempt'; byte_test:4,>,2043,24; content:'|07|'; depth:1; offset:16; byte_test:2,>,2043,30;)"},
{"instruction": " Write a snort rule to alert MYSQL Root Login attempts.", "input": "", "output": "alert tcp $EXTERNAL_NET any -> $SQL_SERVERS 3306 (msg:'MYSQL root login attempt'; flow:to_server,established; content:'|0A 00 00 01 85 04 00 00 80|root|00|';)"},
{"instruction": " Write a snort rule that alerts when the attacker attempts to log in as root on a MYSQL server.", "input": "", "output": "alert tcp $EXTERNAL_NET any -> $SQL_SERVERS 3306 (msg:'MYSQL root login attempt'; flow:to_server,established; content:'|0A 00 00 01 85 04 00 00 80|root|00|';)"},
{"instruction": " Write a snort rule that alerts incoming packets to port 3306 that have the flow to server established and the content '|0A 00 00 01 85 04 00 00 80|root|00|'.", "input": "", "output": "alert tcp $EXTERNAL_NET any -> $SQL_SERVERS 3306 (msg:'MYSQL root login attempt'; flow:to_server,established; content:'|0A 00 00 01 85 04 00 00 80|root|00|';)"},
{"instruction": " Write a snort rule to alert MYSQL Show Databases attempts.", "input": "", "output": "alert tcp $EXTERNAL_NET any -> $SQL_SERVERS 3306 (msg:'MYSQL show databases attempt'; flow:to_server,established; content:'|0F 00 00 00 03|show databases';)"},
{"instruction": " Write a snort rule that alerts when the attacker attempts to show the databases on a MYSQL server.", "input": "", "output": "alert tcp $EXTERNAL_NET any -> $SQL_SERVERS 3306 (msg:'MYSQL show databases attempt'; flow:to_server,established; content:'|0F 00 00 00 03|show databases';)"},
{"instruction": " Write a snort rule that alerts incoming packets to port 3306 that have the flow to server and established and the content '|0F 00 00 00 03|show databases'.", "input": "", "output": "alert tcp $EXTERNAL_NET any -> $SQL_SERVERS 3306 (msg:'MYSQL show databases attempt'; flow:to_server,established; content:'|0F 00 00 00 03|show databases';)"},
{"instruction": " Write a snort rule to alert NETBIOS NT NULL Session Request attempts.", "input": "", "output": "alert tcp $EXTERNAL_NET any -> $HOME_NET 139 (msg:'NETBIOS NT NULL session'; flow:to_server,established; content:'|00 00 00 00|W|00|i|00|n|00|d|00|o|00|w|00|s|00| |00|N|00|T|00| |00|1|00|3|00|8|00|1';)"},
{"instruction": " Write a snort rule that alerts when the attacker attempts to cause a denial of service via a NetBIOS session request packet with a NULL source name.", "input": "", "output": "alert tcp $EXTERNAL_NET any -> $HOME_NET 139 (msg:'NETBIOS NT NULL session'; flow:to_server,established; content:'|00 00 00 00|W|00|i|00|n|00|d|00|o|00|w|00|s|00| |00|N|00|T|00| |00|1|00|3|00|8|00|1';)"},
{"instruction": " Write a snort rule that alerts incoming packets to port 139 that have the flow to server and established and the content '|00 00 00 00|W|00|i|00|n|00|d|00|o|00|w|00|s|00| |00|N|00|T|00| |00|1|00|3|00|8|00|1'.", "input": "", "output": "alert tcp $EXTERNAL_NET any -> $HOME_NET 139 (msg:'NETBIOS NT NULL session'; flow:to_server,established; content:'|00 00 00 00|W|00|i|00|n|00|d|00|o|00|w|00|s|00| |00|N|00|T|00| |00|1|00|3|00|8|00|1';)"},
{"instruction": " Write a snort rule to alert SHELLCODE sparc setuid 0 attempts.", "input": "", "output": "alert ip $EXTERNAL_NET $SHELLCODE_PORTS -> $HOME_NET any (msg:'SHELLCODE sparc setuid 0'; content:'|82 10| |17 91 D0| |08|';)"},
{"instruction": " Write a snort rule that alerts when the attacker attempts to exploit the setuid() function on a SPARC architecture.", "input": "", "output": "alert ip $EXTERNAL_NET $SHELLCODE_PORTS -> $HOME_NET any (msg:'SHELLCODE sparc setuid 0'; content:'|82 10| |17 91 D0| |08|';)"},
{"instruction": " Write a snort rule that alerts incoming ip's that have the content '|82 10| |17 91 D0| |08|'.", "input": "", "output": "alert ip $EXTERNAL_NET $SHELLCODE_PORTS -> $HOME_NET any (msg:'SHELLCODE sparc setuid 0'; content:'|82 10| |17 91 D0| |08|';)"},
{"instruction": " Write a snort rule to alert SHELLCODE x86 setgid 0 attempts.", "input": "", "output": "alert ip $EXTERNAL_NET $SHELLCODE_PORTS -> $HOME_NET any (msg:'SHELLCODE x86 setgid 0'; content:'|B0 B5 CD 80|';)"},
{"instruction": " Write a snort rule that alerts when the attacker attempts to exploit the setgid() function on a x86 architecture.", "input": "", "output": "alert ip $EXTERNAL_NET $SHELLCODE_PORTS -> $HOME_NET any (msg:'SHELLCODE x86 setgid 0'; content:'|B0 B5 CD 80|';)"},
{"instruction": " Write a snort rule that alerts incoming ip's that have the content '|B0 B5 CD 80|'.", "input": "", "output": "alert ip $EXTERNAL_NET $SHELLCODE_PORTS -> $HOME_NET any (msg:'SHELLCODE x86 setgid 0'; content:'|B0 B5 CD 80|';)"},
{"instruction": " Write a snort rule to alert SHELLCODE x86 setuid 0 attempts.", "input": "", "output": "alert ip $EXTERNAL_NET $SHELLCODE_PORTS -> $HOME_NET any (msg:'SHELLCODE x86 setuid 0'; content:'|B0 17 CD 80|';)"},
{"instruction": " Write a snort rule that alerts when the attacker attempts to exploit the setuid() function on a x86 architecture.", "input": "", "output": "alert ip $EXTERNAL_NET $SHELLCODE_PORTS -> $HOME_NET any (msg:'SHELLCODE x86 setuid 0'; content:'|B0 17 CD 80|';)"},
{"instruction": " Write a snort rule that alerts incoming ip's that have the content '|B0 17 CD 80|'.", "input": "", "output": "alert ip $EXTERNAL_NET $SHELLCODE_PORTS -> $HOME_NET any (msg:'SHELLCODE x86 setuid 0'; content:'|B0 17 CD 80|';)"},
{"instruction": " Write a snort rule to alert SQL Worm Propagation attempts.", "input": "", "output": "alert udp $EXTERNAL_NET any -> $HOME_NET 1434 (msg:'SQL Worm propagation attempt'; content:'|04|'; depth:1; content:'|81 F1 03 01 04 9B 81 F1 01|'; content:'sock'; content:'send';)"},
{"instruction": " Write a snort rule that alerts when the attacker attempts to propagate a SQL worm.", "input": "", "output": "alert udp $EXTERNAL_NET any -> $HOME_NET 1434 (msg:'SQL Worm propagation attempt'; content:'|04|'; depth:1; content:'|81 F1 03 01 04 9B 81 F1 01|'; content:'sock'; content:'send';)"},
{"instruction": " Write a snort rule that alerts incoming udp packets to port 1434 that have the content '|04|', depth 1, the content '|81 F1 03 01 04 9B 81 F1 01|', 'sock' and 'send'.", "input": "", "output": "alert udp $EXTERNAL_NET any -> $HOME_NET 1434 (msg:'SQL Worm propagation attempt'; content:'|04|'; depth:1; content:'|81 F1 03 01 04 9B 81 F1 01|'; content:'sock'; content:'send';)"},
{"instruction": " Write a snort rule to alert Cross Site Scripting (XSS) attempts.", "input": "", "output": "alert tcp $EXTERNAL_NET any -> $HTTP_SERVERS $HTTP_PORTS (msg:'Cross site scripting attempt'; flow:to_server,established; content:'<SCRIPT>'; nocase;)"},
{"instruction": " Write a snort rule that alerts when the attacker attempts to inject malicious scripts into a website.", "input": "", "output": "alert tcp $EXTERNAL_NET any -> $HTTP_SERVERS $HTTP_PORTS (msg:'Cross site scripting attempt'; flow:to_server,established; content:'<SCRIPT>'; nocase;)"},
{"instruction": " Write a snort rule that alerts incoming packets to port 80 that have the flow to server established and the content '<script>'.", "input": "", "output": "alert tcp $EXTERNAL_NET any -> $HTTP_SERVERS $HTTP_PORTS (msg:'Cross site scripting attempt'; flow:to_server,established; content:'<SCRIPT>'; nocase;)"}
]